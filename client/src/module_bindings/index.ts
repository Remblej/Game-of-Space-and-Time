// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Add } from "./add_reducer.ts";
export { Add };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { SetColor } from "./set_color_reducer.ts";
export { SetColor };
import { Tick } from "./tick_reducer.ts";
export { Tick };
import { UpdateTickInterval } from "./update_tick_interval_reducer.ts";
export { UpdateTickInterval };

// Import and reexport all table handle types
import { AliveCellsTableHandle } from "./alive_cells_table.ts";
export { AliveCellsTableHandle };
import { ConfigTableHandle } from "./config_table.ts";
export { ConfigTableHandle };
import { PlayersTableHandle } from "./players_table.ts";
export { PlayersTableHandle };
import { TickScheduleTableHandle } from "./tick_schedule_table.ts";
export { TickScheduleTableHandle };

// Import and reexport all types
import { AliveCell } from "./alive_cell_type.ts";
export { AliveCell };
import { Cell } from "./cell_type.ts";
export { Cell };
import { Config } from "./config_type.ts";
export { Config };
import { Player } from "./player_type.ts";
export { Player };
import { TickSchedule } from "./tick_schedule_type.ts";
export { TickSchedule };

const REMOTE_MODULE = {
  tables: {
    alive_cells: {
      tableName: "alive_cells",
      rowType: AliveCell.getTypeScriptAlgebraicType(),
    },
    config: {
      tableName: "config",
      rowType: Config.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    players: {
      tableName: "players",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    tick_schedule: {
      tableName: "tick_schedule",
      rowType: TickSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduled_id",
    },
  },
  reducers: {
    add: {
      reducerName: "add",
      argsType: Add.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    set_color: {
      reducerName: "set_color",
      argsType: SetColor.getTypeScriptAlgebraicType(),
    },
    tick: {
      reducerName: "tick",
      argsType: Tick.getTypeScriptAlgebraicType(),
    },
    update_tick_interval: {
      reducerName: "update_tick_interval",
      argsType: UpdateTickInterval.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Add", args: Add }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "SetColor", args: SetColor }
| { name: "Tick", args: Tick }
| { name: "UpdateTickInterval", args: UpdateTickInterval }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  add(cells: Cell[]) {
    const __args = { cells };
    let __writer = new BinaryWriter(1024);
    Add.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add", __argsBuffer, this.setCallReducerFlags.addFlags);
  }

  onAdd(callback: (ctx: ReducerEventContext, cells: Cell[]) => void) {
    this.connection.onReducer("add", callback);
  }

  removeOnAdd(callback: (ctx: ReducerEventContext, cells: Cell[]) => void) {
    this.connection.offReducer("add", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  setColor(colorHex: string) {
    const __args = { colorHex };
    let __writer = new BinaryWriter(1024);
    SetColor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_color", __argsBuffer, this.setCallReducerFlags.setColorFlags);
  }

  onSetColor(callback: (ctx: ReducerEventContext, colorHex: string) => void) {
    this.connection.onReducer("set_color", callback);
  }

  removeOnSetColor(callback: (ctx: ReducerEventContext, colorHex: string) => void) {
    this.connection.offReducer("set_color", callback);
  }

  tick(arg: TickSchedule) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    Tick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("tick", __argsBuffer, this.setCallReducerFlags.tickFlags);
  }

  onTick(callback: (ctx: ReducerEventContext, arg: TickSchedule) => void) {
    this.connection.onReducer("tick", callback);
  }

  removeOnTick(callback: (ctx: ReducerEventContext, arg: TickSchedule) => void) {
    this.connection.offReducer("tick", callback);
  }

  updateTickInterval(intervalMs: number) {
    const __args = { intervalMs };
    let __writer = new BinaryWriter(1024);
    UpdateTickInterval.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_tick_interval", __argsBuffer, this.setCallReducerFlags.updateTickIntervalFlags);
  }

  onUpdateTickInterval(callback: (ctx: ReducerEventContext, intervalMs: number) => void) {
    this.connection.onReducer("update_tick_interval", callback);
  }

  removeOnUpdateTickInterval(callback: (ctx: ReducerEventContext, intervalMs: number) => void) {
    this.connection.offReducer("update_tick_interval", callback);
  }

}

export class SetReducerFlags {
  addFlags: CallReducerFlags = 'FullUpdate';
  add(flags: CallReducerFlags) {
    this.addFlags = flags;
  }

  setColorFlags: CallReducerFlags = 'FullUpdate';
  setColor(flags: CallReducerFlags) {
    this.setColorFlags = flags;
  }

  tickFlags: CallReducerFlags = 'FullUpdate';
  tick(flags: CallReducerFlags) {
    this.tickFlags = flags;
  }

  updateTickIntervalFlags: CallReducerFlags = 'FullUpdate';
  updateTickInterval(flags: CallReducerFlags) {
    this.updateTickIntervalFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get aliveCells(): AliveCellsTableHandle {
    return new AliveCellsTableHandle(this.connection.clientCache.getOrCreateTable<AliveCell>(REMOTE_MODULE.tables.alive_cells));
  }

  get config(): ConfigTableHandle {
    return new ConfigTableHandle(this.connection.clientCache.getOrCreateTable<Config>(REMOTE_MODULE.tables.config));
  }

  get players(): PlayersTableHandle {
    return new PlayersTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.players));
  }

  get tickSchedule(): TickScheduleTableHandle {
    return new TickScheduleTableHandle(this.connection.clientCache.getOrCreateTable<TickSchedule>(REMOTE_MODULE.tables.tick_schedule));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
